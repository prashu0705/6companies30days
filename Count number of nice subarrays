Question link:- https://leetcode.com/problems/count-number-of-nice-subarrays/

Approach:-
  Subarrays with At Most k Odd Numbers:
    Use the sliding window technique to calculate the number of subarrays with at most k odd numbers.
    This is achieved by expanding the window (end pointer) and shrinking it (start pointer) when the count of odd numbers exceeds k.
  Subarrays with Exactly k Odd Numbers:
    To get the count of subarrays with exactly k odd numbers, calculate the difference:
      Subarrays with Exactly ‘k‘ Odd Numbers = Subarrays with At Most ‘k‘ Odd Numbers − Subarrays with At Most ‘k-1‘ Odd Numbers


Code:- 
class Solution {
public:
    int numberOfSubarraysWithAtMostKOdds(const vector<int>& nums, int k) {
    int n = nums.size();
    int start = 0;
    int count = 0;
    
    for (int end = 0; end < n; end++) {
        k -= nums[end] % 2;  // Reduce k if the number is odd (odd numbers are 1)
        
        while (k < 0) {  // If we have more than k odd numbers in the window, shrink the window
            k += nums[start] % 2;
            start++;
        }
        
        count += end - start + 1;  // Add the number of valid subarrays ending at 'end'
    }
    
    return count;
}

int numberOfSubarrays(vector<int>& nums, int k) {
    // Convert the array to binary: 1 for odd, 0 for even
    for (int i = 0; i < nums.size(); i++) {
        nums[i] = (nums[i] % 2);
    }
    
    // Count subarrays with exactly k odd numbers = subarrays with at most k odd numbers - subarrays with at most k-1 odd numbers
    return numberOfSubarraysWithAtMostKOdds(nums, k)-numberOfSubarraysWithAtMostKOdds(nums, k - 1);
}
};

Status:- Revisit
