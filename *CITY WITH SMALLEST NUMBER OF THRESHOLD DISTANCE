LINK:- https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/description/

CODE:-
  class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        // Initialize distance matrix with large values (infinity)
        vector<vector<int>> dist(n, vector<int>(n, INT_MAX));
        
        // Set distance to self as 0
        for (int i = 0; i < n; i++) {
            dist[i][i] = 0;
        }

        // Fill initial distances from edges
        for (auto& edge : edges) {
            int from = edge[0], to = edge[1], weight = edge[2];
            dist[from][to] = weight;
            dist[to][from] = weight;
        }

        // Apply Floyd-Warshall algorithm to find shortest paths
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] != INT_MAX && dist[k][j] != INT_MAX) {
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                }
            }
        }

        // Determine the city with the smallest number of reachable cities
        int minReachable = n; // Max possible value
        int city = -1;

        for (int i = 0; i < n; i++) {
            int reachable = 0;
            for (int j = 0; j < n; j++) {
                if (dist[i][j] <= distanceThreshold) {
                    reachable++;
                }
            }
            // Update result based on the problem constraints
            if (reachable <= minReachable) {
                minReachable = reachable;
                city = i; // In case of a tie, larger city index is chosen
            }
        }

        return city;
    }
};
