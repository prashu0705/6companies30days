LINK :- https://leetcode.com/problems/shopping-offers/description/

CODE:- 
  class Solution {
    unordered_map<string, int> dp;
    string getkey(vector<int>& needs, int index){
        string s;
        s += to_string(index) + ',';
        for(int i = 0;i<needs.size();i++){
            s += to_string(needs[i]) + ',';
        }
        return s;
    }
    int solve(vector<int>& price, vector<vector<int>>& special, vector<int>& needs, int index){
        string key = getkey(needs, index);
        if(dp.find(key) != dp.end()) return dp[key];
        if(index == special.size()){
            int ans = 0;
            for(int i = 0;i<price.size();i++){
                ans += price[i] * needs[i];
            }
            return ans;
        }
        int n = special[index].size();
        vector<int> newneed = needs;
        bool check = true;
        int sum = 0;
        for(int i = 0;i<n-1;i++){
            if(special[index][i] > needs[i]){
                check = false;
                break;
            }
            newneed[i] -= special[index][i];
            sum += special[index][i] * price[i];
        }
        int a = INT_MAX, b = INT_MAX, c = INT_MAX;
        if(sum > special[index][n-1] && check == true){
            a = special[index][n-1] + solve(price, special, newneed, index);
            b = special[index][n-1] + solve(price, special, newneed, index + 1);
        }
        c = solve(price, special, needs, index + 1);
        return dp[key] = min({a,b,c});
    }
public:
    int shoppingOffers(vector<int>& price, vector<vector<int>>& special, vector<int>& needs) {
        return solve(price, special, needs, 0);
    }
};
