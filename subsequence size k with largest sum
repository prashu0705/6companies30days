question link:- https://leetcode.com/problems/find-subsequence-of-length-k-with-the-largest-sum/description/

approach:-
  Use a Min-Heap:
    Iterate through the array.
    Push (value, index) pairs into the heap.
    If the heap size exceeds k, remove the smallest element to maintain only the top k largest elements.
  Extract Elements:
    Extract all elements from the heap (these are the top k largest elements).
  Sort by Index:
    Sort the extracted elements based on their original indices to maintain the subsequence order.
  Form the Result:
    Extract the values from the sorted pairs to form the subsequence.

Code:-
  class Solution {
public:
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> minHeap;
        for(int i = 0; i < nums.size(); i++){
            minHeap.push({nums[i], i});
            if(minHeap.size() > k) {
                minHeap.pop();
            }
        }
        vector<pair<int, int>> topK;
        while (!minHeap.empty()) {
            topK.push_back(minHeap.top());
            minHeap.pop();
        }
        sort(topK.begin(), topK.end(), [](const pair<int, int>& a, const pair<int, int>& b) {
            return a.second < b.second;
        });
        vector<int> result;
        for (const auto& pair : topK) {
            result.push_back(pair.first);
        }
        return result;
    }
};

Status:- Done
