Question Link:- https://leetcode.com/problems/find-the-distance-value-between-two-arrays/

Approach:-
  Sort arr2:
    Sorting arr2 allows us to perform binary search on it, reducing the time complexity of checking distance values from O(n) to O(log n) for each element in arr1.
  Define a Helper Function isValid:
    The function checks if a given target (from arr1) satisfies the condition: ∣arr1[i]−arr2[j]∣>dfor allj∈[0,arr2.size()−1].
    Binary Search is used to find if there exists an arr2[j] such that ∣arr1[i]−arr2[j]∣≤d.
      If such an element exists, return false.
      Otherwise, return true.
  Iterate Over arr1:
    For each element in arr1, call the isValid function.
    If isValid returns true, increment the count of valid elements.
  Return the Count:
    The final result is the count of elements in arr1 that satisfy the condition.

Code:-
  class Solution {
public:
    bool isValid(vector<int>& arr, int target, int d) {
        int low  = 0;
        int high = arr.size() - 1;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(abs(arr[mid] - target) <= d) {
                return false;
            } else if(arr[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return true;
    }
    int findTheDistanceValue(vector<int>& arr1, vector<int>& arr2, int d) {
        sort(arr2.begin(), arr2.end());
        int count = 0;
        for(int num : arr1) {
            if(isValid(arr2, num, d)) {
                count++;
            }
        }
        return count;
    }
};

Status:- Done
